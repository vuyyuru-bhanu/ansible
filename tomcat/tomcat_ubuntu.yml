---
- name: install tomcat
  become: yes
  hosts: appserver
  vars:
    tomcat_home_dir: /opt/tomcat
    tomcat_user: tomcat
    tomcat_default_shell: /bin/false
    tomcat_url: https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.88/bin/apache-tomcat-9.0.88.tar.gz
    tomcat_download_path: /tmp/apache-tomcat-9.0.88.tar.gz
    tomcat_users_location: /opt/tomcat/latest/conf/tomcat-users.xml
    tomcat_manager_conf_location: /opt/tomcat/latest/webapps/manager/META-INF/context.xml
    tomcat_hostmanager_conf_location: /opt/tomcat/latest/webapps/host-manager/META-INF/context.xml
    tomcat_service_file_location: /etc/systemd/system/tomcat.service
    manager_username: root
    manager_password: root
  tasks:
    - name: fail on unsupported devices
      ansible.builtin.fail:
        msg: thsi play book supports only ubnutu and centos
      when: 
        - ansible_facts["distribution"] != "Ubuntu"
        - ansible_facts["distribution"] != "CentOS"
    - ansible.builtin.debug:
        msg: "Installing Java 11 with package {{ java_package }} "
    - name: install java
      ansible.builtin.package:
        name: "{{ java_package }}"
        state: present
        update_cache: yes
    - ansible.builtin.debug:
        msg: "Creating a user  {{ tomcat_user }} with home directory {{ tomcat_home_dir }} and shell {{ tomcat_default_shell }} "
    - name: create tomcat user
      ansible.builtin.user:
        name: "{{ tomcat_user }}"
        shell: "{{ tomcat_default_shell }}"
        create_home: true
        home: "{{ tomcat_home_dir }}"
    - ansible.builtin.debug:
        msg: "Downloading tomcat from {{ tomcat_url }} to {{ tomcat_download_path }}"
    - name: download tomcat tar file
      ansible.builtin.get_url:
        url: "{{ tomcat_url }}"
        dest: "{{ tomcat_download_path }}"
      notify:
        - unarchive tomcat zip file
    - name: Flush handlers
      meta: flush_handlers
    - ansible.builtin.debug:
        msg: "Create a symbolic link"
    
    - name: Create a symbolic link
      ansible.builtin.file:
        src: "{{ tomcat_home_dir }}/apache-tomcat-9.0.88"
        dest: "{{ tomcat_home_dir }}/latest"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        state: link
    - ansible.builtin.debug:
        msg: "Change the directory ownership to tomcat"
    - name:  Change the directory ownership
      ansible.builtin.file:
        path: "{{ tomcat_home_dir }}"
        state: directory
        recurse: yes
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
    - ansible.builtin.debug:
        msg: "making shell scripts inside the Tomcat is excutable"
    - name: making shell scripts inside the Tomcat is excutable 
      ansible.builtin.file:
        path: "{{ item }}"
        state: file
        mode: u+x,g+x,o+x
      with_fileglob:
        - "/opt/tomcat/latest/bin/*.sh"
    - ansible.builtin.debug:
        msg: "copy the tomcat service unit file from {{ source_service }} to {{ tomcat_service_file_location }}"
    - name: copy the tomcat service unit file
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: "{{ tomcat_service_file_location }}"
    - ansible.builtin.debug:
        msg: "enable tomcat and start the service"    
    - name: enable tomcat and start the service
      ansible.builtin.service:
        name: tomcat
        daemon_reload: yes
        enabled: yes
        state: started
    - name: copy the tomcat users xml
      ansible.builtin.template:
        src: tomcat-users.xml.j2
        dest: "{{ tomcat_users_location }}"
      notify:
        - restart tomcat service
    - name: copy manager context xml
      ansible.builtin.copy:
        src: manager-context.xml
        dest: "{{ tomcat_manager_conf_location }}"
      notify:
        - restart tomcat service
    - name: copy host manager context xml
      ansible.builtin.copy:
        src: hostmanager-context.xml
        dest: "{{ tomcat_hostmanager_conf_location }}"
      notify:
        - restart tomcat service
  
  handlers:
    - name: unarchive tomcat zip file 
      ansible.builtin.unarchive:
        src: "{{ tomcat_download_path }}"
        dest: "{{ tomcat_home_dir }}"
        remote_src: yes
    - name: restart tomcat service
      ansible.builtin.service:
        name: tomcat
        state: restarted
        